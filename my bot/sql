-- Create the database if it doesn't exist
CREATE DATABASE IF NOT EXISTS `online_bookstore`;
USE `online_bookstore`;
-- Table structure for books
DROP TABLE IF EXISTS `books`;
CREATE TABLE `book_names` (
  `book_id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL,
  `price` DECIMAL(10, 2) NOT NULL,
  PRIMARY KEY (`book_id`)
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
-- Dumping data for table `book_names`
LOCK TABLES `book_names` WRITE;
INSERT INTO `book_names` VALUES (1,'Introduction to AI/ML and Data Science',35.00),(2,'Machine Learning using Python',25.00),(3,'Mathematics for Computer Science',18.00),(4,'Introductory discrete mathematics',22.00),(5,'Introduction to Algorithms',25.00),(6,'Modern Operating Systems',15.00),(7,'C Programming Language',50.00),(8,'Computer Organization and Design',35.00),(9,'Data Structures and Algorithms',20.00),(10,'Adventures of Sherlock Holmes',15.00);
UNLOCK TABLES;

-- Table structure for table `order_tracking`
DROP TABLE IF EXISTS `order_tracking`;
CREATE TABLE `order_tracking` (
  `order_id` int NOT NULL,
  `status` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`order_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
-- Dumping data for table `order_tracking`
LOCK TABLES `order_tracking` WRITE;
INSERT INTO `order_tracking` VALUES (40,'delivered'),(41,'in transit');
UNLOCK TABLES;

-- Table structure for table `orders`
DROP TABLE IF EXISTS `orders`;
CREATE TABLE `orders` (
  `order_id` int NOT NULL,
  `book_id` int NOT NULL,
  `quantity` int DEFAULT NULL,
  `total_price` decimal(10,2) DEFAULT NULL,
  PRIMARY KEY (`order_id`,`book_id`),
  KEY `orders_ibfk_1` (`book_id`),
  CONSTRAINT `orders_ibfk_1` FOREIGN KEY (`book_id`) REFERENCES `book_names` (`book_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
-- Dumping data for table `orders`
LOCK TABLES `orders` WRITE;
INSERT INTO `orders` VALUES (40,1,2,20.00),(40,3,1,80.00),(41,4,3,35.00),(41,6,2,48.00),(41,9,4,20.00);
UNLOCK TABLES;

-- Stored Function to get the price of a book
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `get_price_for_book`(p_item_name VARCHAR(255)) RETURNS decimal(10,2)
    DETERMINISTIC
BEGIN
    DECLARE v_price DECIMAL(10, 2);
    
    -- Check if the item_name exists in the book_names table
    IF (SELECT COUNT(*) FROM book_names WHERE name = p_item_name) > 0 THEN
        -- Retrieve the price for the book
        SELECT price INTO v_price
        FROM book_names
        WHERE name = p_item_name;
        
        RETURN v_price;
    ELSE
        -- Invalid item_name, return -1
        RETURN -1;
    END IF;
END ;;
DELIMITER ;

-- Stored Function to get the total price of a order
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` FUNCTION `get_total_order_price`(p_order_id INT) RETURNS decimal(10,2)
    DETERMINISTIC
BEGIN
    DECLARE v_total_price DECIMAL(10, 2);
    
    -- Check if the order_id exists in the orders table
    IF (SELECT COUNT(*) FROM orders WHERE order_id = p_order_id) > 0 THEN
        -- Calculate the total price
        SELECT SUM(total_price) INTO v_total_price
        FROM orders
        WHERE order_id = p_order_id;
        
        RETURN v_total_price;
    ELSE
        -- Invalid order_id, return -1
        RETURN -1;
    END IF;
END ;;
DELIMITER ;

--  Function to insert order item
DELIMITER ;;
CREATE DEFINER=`root`@`localhost` PROCEDURE `insert_order_item`(
  IN p_book_name VARCHAR(255),
  IN p_quantity INT,
  IN p_order_id INT
)
BEGIN
    DECLARE v_book_id INT;
    DECLARE v_price DECIMAL(10, 2);
    DECLARE v_total_price DECIMAL(10, 2);

    -- Get the item_id and price for the book
    SET v_item_id = (SELECT book_id FROM book_names WHERE name = p_book_name);
    SET v_price = (SELECT get_price_for_book(p_book_name));

    -- Calculate the total price for the order item
    SET v_total_price = v_price * p_quantity;

    -- Insert the order item into the orders table
    INSERT INTO orders (order_id, book_id, quantity, total_price)
    VALUES (p_order_id, v_book_id, p_quantity, v_total_price);
END ;;
DELIMITER ;

